---
title: "Statistics & Engineering Math Notes"
author: "Your Name"
format:
  html:
    toc: true
    toc-location: left
    number-sections: true
    code-fold: true
    df-print: paged
  pdf:
    toc: true
    number-sections: true
  docx: default
execute:
  echo: true
  warning: false
  message: false
fontsize: 11pt
editor: source
# bibliography: references.bib   # <- optional: add a BibTeX file for citations
---

# Getting Started

This Quarto notebook is set up for **R + Python** using **knitr + reticulate**.  
Use it to keep clean, searchable notes with formulas, code, and plots.

- Inline math: $\\bar{x} = \\frac{1}{n}\\sum_{i=1}^n x_i$
- Display math:

$$
s^2 = \\frac{1}{n-1}\\sum_{i=1}^n (x_i - \\bar{x})^2
$$

> Tip: Press **Render** in RStudio to produce HTML/PDF/DOCX. Install a LaTeX distribution (e.g., TinyTeX) for PDF.

## Environment Setup

```{r}
#| label: setup
#| include: false
# R packages
required <- c("tidyverse", "readxl", "knitr", "reticulate")
to_install <- required[!required %in% installed.packages()[, "Package"]]
if (length(to_install)) install.packages(to_install)

library(tidyverse)
library(readxl)
library(knitr)
library(reticulate)

# Optional: point reticulate to a specific Python (e.g., your web-env/game-env)
# use_python("C:/Path/To/Python.exe", required = FALSE)
# virtualenv_create("web-env")  # create if needed
# use_virtualenv("web-env", required = FALSE)

knitr::opts_chunk$set(fig.width = 6, fig.height = 4, fig.align = "center")
```

```{python}
#| label: py-setup
#| include: false
import sys, platform
import numpy as np
import pandas as pd

# Show interpreter info (helps debug)
py_info = {
    "python": sys.version.split()[0],
    "impl": platform.python_implementation(),
    "executable": sys.executable
}
py_info
```

# Data & Import

## R: Read Excel/CSV

```{r}
#| label: r-data-import
#| tbl-cap: "Preview of data (R)"
# Replace with your file path
# data <- read_excel("data/myfile.xlsx", sheet = 1)
# data <- read_csv("data/myfile.csv")

# demo tibble:
data <- tibble(x = rnorm(100, mean = 10, sd = 2))

head(data)
```

## Python: Read Excel/CSV

```{python}
#| label: py-data-import
#| tbl-cap: "Preview of data (Python)"
# Replace with your file path
# df = pd.read_excel("data/myfile.xlsx", sheet_name=0)
# df = pd.read_csv("data/myfile.csv")

# demo dataframe:
df = pd.DataFrame({"x": np.random.normal(loc=10, scale=2, size=100)})
df.head()
```

# Descriptive Statistics

## R

```{r}
#| label: r-summary
summary_stats_r <- data |>
  summarise(
    n = n(),
    mean = mean(x),
    sd = sd(x),
    min = min(x),
    q1 = quantile(x, 0.25),
    median = median(x),
    q3 = quantile(x, 0.75),
    max = max(x)
  )
summary_stats_r
```

## Python

```{python}
#| label: py-summary
summary_stats_py = df["x"].describe().to_frame(name="x")
summary_stats_py
```

# Visualizations

## R (ggplot2)

```{r}
#| label: r-hist
#| fig-cap: "Histogram of x (R)"
ggplot(data, aes(x = x)) +
  geom_histogram(bins = 20) +
  labs(x = "x", y = "Count")
```

## Python (matplotlib)

```{python}
#| label: py-hist
#| fig-cap: "Histogram of x (Python)"
import matplotlib.pyplot as plt
plt.hist(df["x"], bins=20)
plt.xlabel("x")
plt.ylabel("Count")
plt.show()
```

# Common Formulas (Cheat Sheet)

- **Sample mean:** $\\bar{x} = \\frac{1}{n}\\sum_{i=1}^n x_i$
- **Sample variance:** $s^2 = \\frac{1}{n-1}\\sum_{i=1}^n (x_i - \\bar{x})^2$
- **Binomial pmf:** $\\Pr(X=k) = \\binom{n}{k} p^k (1-p)^{n-k}$
- **Normal pdf:** $f(x) = \\frac{1}{\\sigma\\sqrt{2\\pi}} e^{-\\tfrac{1}{2}\\left(\\tfrac{x-\\mu}{\\sigma}\\right)^2}$
- **SE of \\(\\bar{x}\\):** $\\text{SE}(\\bar{x}) = \\frac{s}{\\sqrt{n}}$

# Confidence Intervals

## R (One-sample mean, t-interval)

```{r}
#| label: r-ci
alpha <- 0.05
mu_hat <- mean(data$x)
s_hat  <- sd(data$x)
n      <- nrow(data)
tcrit  <- qt(1 - alpha/2, df = n - 1)
ci_low  <- mu_hat - tcrit * s_hat / sqrt(n)
ci_high <- mu_hat + tcrit * s_hat / sqrt(n)
tibble(mu_hat, ci_low, ci_high)
```

## Python (One-sample mean, t-interval)

```{python}
#| label: py-ci
import numpy as np
from scipy import stats

alpha = 0.05
mu_hat = df["x"].mean()
s_hat  = df["x"].std(ddof=1)
n      = df["x"].shape[0]
tcrit  = stats.t.ppf(1 - alpha/2, df=n-1)
ci_low  = mu_hat - tcrit * s_hat / np.sqrt(n)
ci_high = mu_hat + tcrit * s_hat / np.sqrt(n)
{"mu_hat": mu_hat, "ci_low": ci_low, "ci_high": ci_high}
```

# Hypothesis Testing Template

**Null vs Alternative:**  
$H_0:\\ \\mu = \\mu_0$  
$H_1:\\ \\mu \\ne \\mu_0$

**Test statistic (t):**  
$$
t = \\frac{\\bar{x} - \\mu_0}{s/\\sqrt{n}}
$$

**Decision rule:** Reject $H_0$ if $|t| > t_{\\alpha/2,\\,n-1}$.

## R

```{r}
#| label: r-ht
mu0 <- 10
t_stat <- (mu_hat - mu0) / (s_hat / sqrt(n))
p_val <- 2 * (1 - pt(abs(t_stat), df = n - 1))
tibble(t_stat, p_val)
```

## Python

```{python}
#| label: py-ht
mu0 = 10
t_stat = (mu_hat - mu0) / (s_hat / np.sqrt(n))
p_val = 2 * (1 - stats.t.cdf(np.abs(t_stat), df=n-1))
{"t_stat": t_stat, "p_val": p_val}
```

# Excel Integration Tips

- Save data as **CSV** from Excel and load with `readr::read_csv()` (R) or `pandas.read_csv()` (Python).
- Or read **.xlsx** directly with `readxl::read_excel()` (R) or `pandas.read_excel()` (Python).
- You can paste Excel ranges into RStudio's **data viewer** for quick checks.

# To-Do (Per Lecture/Week)

- [ ] Key definitions and formulas
- [ ] Data preprocessing steps
- [ ] Plots to include
- [ ] Results and interpretations
- [ ] Questions to ask / unclear points

# Appendix

- Add references, links, and extra derivations here.
- If using citations, create a `references.bib` and uncomment `bibliography:` in YAML.
